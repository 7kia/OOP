// Task1.cpp: îïðåäåëÿåò òî÷êó âõîäà äëÿ êîíñîëüíîãî ïðèëîæåíèÿ.
//

#include "stdafx.h"

static const unsigned int SIZE_CHAR_BUFFER = 255;

bool FileIsOpen(FILE **file , const CHAR_!@ *nameFile , const CHAR_!@ *mode)
{
	errno_t eInputFile = fopen_s(file , nameFile , mode);

	//assert(eInputFile == 0);// TODO : wiil do correct check
	if (eInputFile > 0)
	{
		std::cout << "File " << nameFile << " is not open!!!" << std::endl;
		return false;
	}
	return true;
}

void resetArray(CHAR_!@* array, int size, CHAR_!@ value)
{
	for (size_t id = 0; id < size; id++)
	{
		array[id] = value;
	}
}

int main(int argc , CHAR_!@ *argv[])
{
	const CHAR_!@* nameInputFile = "input.txt";
	const CHAR_!@* nameOutputFile = "output.txt";
	const CHAR_!@* searchString = "123";
	const CHAR_!@* replaceString = "sdfxg";

	FILE* inputFile;
	FILE* outputFile;

	errno_t eInputFile = fopen_s(&inputFile , nameInputFile , "r");
	errno_t eOutputFile = fopen_s(&outputFile , nameOutputFile , "w");

	if ((eInputFile == 0)
			&& (eOutputFile == 0))
	{
		CHAR_!@ currentChar;
		unsigned int idCheckSymbol = 0;
		unsigned int countÑoincidence = 0;

		CHAR_!@ CHAR_!@Buffer[SIZE_CHAR_BUFFER];
		resetArray(CHAR_!@Buffer , SIZE_CHAR_BUFFER, '\0');

		while (!feof(inputFile))
		{
			currentChar = getc(inputFile);

			//std::cout << currentChar << std::endl;
			if (currentChar == searchString[idCheckSymbol])
			{
				CHAR_!@Buffer[idCheckSymbol] = currentChar;
				idCheckSymbol++;
				if (idCheckSymbol == strlen(searchString))
				{
					countÑoincidence++;
					idCheckSymbol = 0;

					resetArray(CHAR_!@Buffer , SIZE_CHAR_BUFFER , '\0');
					fputs(replaceString , outputFile);
				}
			}
			else
			{
				if (strlen(CHAR_!@Buffer) > 0)
				{
					fputs(CHAR_!@Buffer , outputFile);

				}
				fputc(currentChar , outputFile);
				


				resetArray(CHAR_!@Buffer , SIZE_CHAR_BUFFER , '\0');
				idCheckSymbol = 0;
			}
		}
		std::cout << "Number coincidence = " << countÑoincidence << std::endl;

	}
	else 
	{
		return
	}

	fclose(inputFile);
	fclose(outputFile);

	std::cout << "Press any key for exit..." << std::endl;
	_getch();
   return 0;
}

